#!/bin/sh
# Copyright (C) 2000-2017 Synology Inc. All rights reserved.

set -eu

script_root=`dirname $0`
package_root=`realpath -m $0/../..`
driver_name=`basename ${package_root}`
driver_root="${SYNOPKG_PKGDEST:-${package_root}/target}/${driver_name}"

is_ovs_enable ()
{
    if [ ! -f  '/usr/syno/etc/synoovs/ovs_reg.conf' ]; then
        return 1
    fi

    use=`cat /usr/syno/etc/synoovs/ovs_reg.conf | wc -l`
    if [ 0 -eq $use ]; then
        return 1
    else
        return 0
    fi
}

set_interfaces()
{
  action=$1
  target_interface_name=${2:-}
  for interface_name in $(ls /sys/class/net)
  do
    # Skip loopback/docker interface, since it doesn have a device/driver
    # folder.
    if [[ "$interface_name" = "lo" || "$interface_name" == "docker"* || "$interface_name" == "ovs"* || "$interface_name" == "syno"* || "$interface_name" == "sit"* || "$interface_name" == "tap"* ]]
    then
      continue
    fi

    # Skip other interfaces if an interface was explicitly specified 
    if [[ -n "$target_interface_name" && "$interface_name" != "$target_interface_name" ]]
    then
      continue
    fi

    # For all other interfaces list the device driver folder and
    # bring interface up/down if the device driver folder links to
    # something with the target device driver in its name.
    driver_location=$(ls -ld /sys/class/net/$interface_name/device/driver)
    interface_has_target_driver=false
    if [ ! -z "$(echo "$driver_location" | grep $driver_name)" ]
    then
      interface_has_target_driver=true
    fi
    if [ $interface_has_target_driver = true ]
    then
      config_file=/etc/sysconfig/network-scripts/ifcfg-$interface_name
      config_file_ovs=/etc/sysconfig/network-scripts/ifcfg-ovs_$interface_name
      config_storage_location=$package_root/etc/ifcfg-$interface_name
      config_storage_location_ovs=$package_root/etc/ifcfg-ovs_$interface_name
      if [ -f "$config_file" ] && [ "$action" = "down" ]
      then
        cp $config_file $config_storage_location
      elif [ "$action" = "up" ] && [ -f "$config_storage_location" ]
      then
        cp $config_storage_location $config_file
      fi
      ifconfig $interface_name $action
      if is_ovs_enable
      then
        if [ -f "$config_file_ovs" ] && [ "$action" = "down" ]
        then
          cp $config_file_ovs $config_storage_location_ovs
        elif [ "$action" = "up" ] && [ -f "$config_storage_location_ovs" ]
        then
          cp $config_storage_location_ovs $config_file_ovs
        fi
        if [ "$action" = "up" ]
        then
          ovs-vsctl add-br ovs_$interface_name
          ovs-vsctl add-port ovs_$interface_name $interface_name
          ifconfig ovs_$interface_name $action
        fi
        if ifconfig ovs_$interface_name 2> /dev/null && [ "$action" = "down" ]
        then
          ifconfig ovs_$interface_name $action
          ovs-vsctl del-br ovs_$interface_name
        fi
      fi
      if [ "$action" = "up" ] && [ -r "$config_file" ] && ! is_ovs_enable
      then
        source $config_file
        if [ "$BOOTPROTO" = "dhcp" ]
        then
          synonet --dhcp $interface_name
        fi
      fi
      if [ "$action" = "up" ] && [ -r "$config_file_ovs" ] && is_ovs_enable
      then
        source $config_file_ovs
        if [ "$BOOTPROTO" = "dhcp" ]
        then
          synonet --dhcp ovs_$interface_name
        fi
      fi

      if [ "$action" = "up" ]
      then
        test -e ${script_root}/apply-private-flags && sh ${script_root}/apply-private-flags $interface_name
      fi
    fi
  done
}

count_usb_interfaces()
{
  ls -l /sys/class/net/ | grep /usb | wc -l
}

case $1 in
	start)
    test -e ${script_root}/apply-memory-setting && sh ${script_root}/apply-memory-setting

    initial_count=`count_usb_interfaces`

		test -e ${driver_root}/mii.ko    && /sbin/insmod ${driver_root}/mii.ko
		test -e ${driver_root}/usbnet.ko && /sbin/insmod ${driver_root}/usbnet.ko
		/sbin/insmod ${driver_root}/${driver_name}.ko

    if [ -r /usr/lib/udev/rules.d/51-usb-${driver_name}-net.rules ]
    then
      exit 0
    fi

		for i in `seq 1 60`
		do
			if [ `count_usb_interfaces` -ne $initial_count ]
			then
				break
			fi
			sleep 1
		done

		set_interfaces up
		exit 0
	;;
	stop)
		set_interfaces down
		/sbin/rmmod ${driver_root}/${driver_name}.ko
		test -e ${driver_root}/usbnet.ko && /sbin/rmmod ${driver_root}/usbnet.ko
		test -e ${driver_root}/mii.ko    && /sbin/rmmod ${driver_root}/mii.ko
		exit 0
	;;
	status)
		/sbin/lsmod | grep ${driver_name} && exit 0 || exit 3
	;;
	killall)
    exit 0
  ;;
	log)
		exit 0
	;;
  reload)
    set_interfaces down $2
    set_interfaces up $2
    exit 0
  ;;
esac

